# LAMBDA CALCULUS IMPLEMENTATION: BARENDRECHT'S NUMERALS
# ------------------------------------------------------

## 1. PURPOSE
This documentation explains the implementation of Barendregt's numerals in lambda calculus using Lambda Shell, demonstrating:
- Representation of natural numbers
- Basic arithmetic operations (successor, predecessor, zero test)
- Boolean logic and pair operations

## 2. Definiciones

> let true = \x.\y.x
Explanation: true is a function that takes two arguments (x and y) and always returns the first (x).
Example: true M N → M.

> let false = \x.\y.y
Explanation: false takes two arguments and always returns the second (y).
Example: false M N → N.

> let pair = \m.\n.\z.z m n
Explanation: Constructs a pair [M, N]. It expects a selector z (either true or false) to choose between m or n.
Example: pair M N true → M.

> let fst = \p.p true
Explanation: Takes a pair p and applies true to select the first element.
Example: fst [M, N] → M.

> let snd = \p.p false
Explanation: Takes a pair p and applies false to select the second element.
Example: snd [M, N] → N.

## 3. Barendregt's Numerals

> let I = \x.x
> let zero = I
Explanation:
I is the identity function.
zero is defined as I (the numeral 0).

> let succ = \x.pair false x
Explanation: The successor of a numeral x is the pair [false, x].
Example: succ zero → [false, zero] (numeral 1).

> let x0 = zero
> let x1 = succ x0  -- [false, x0] (1)
> let x2 = succ x1  -- [false, x1] (2)
> let x3 = succ x2  -- [false, x2] (3)
> let x4 = succ x3  -- [false, x3] (4)
> let x5 = succ x4  -- [false, x4] (5)
Explanation: Each numeral n+1 is [false, n]. Thus:
x0 = 0
x1 = 1 = [false, x0]
x2 = 2 = [false, x1]
...

## 4. Arithmetic Operations

> let pred = \x.x false
Explanation: The predecessor of x is x false (extracts the second element of the pair [false, x]).
Examples:
pred x1 → x0 (because x1 = [false, x0]).
pred x0 → false (undefined for 0).

> let iszero = \x.x true
Explanation: Checks if x is zero by applying true to the numeral.
Examples:
iszero x0 → true (because x0 = I, and I true = true).
iszero x1 → false (because x1 true = [false, x0] true = false).

## 5. Evaluation Examples

> false (\a.a) (\b.b)  --> \b.b
Explanation: false selects its second argument (\b.b).

> true (\x.x) (\y.y)  --> \x.x
Explanation: true selects its first argument (\x.x).

> fst (pair (\s.s) (\t.t))  --> \s.s
Explanation: fst extracts the first element of the pair [\s.s, \t.t].

> pair (\m.m) (\n.n) true  --> \m.m
Explanation: The pair applied to true returns the first element.

> succ x0  --> \z. z (\x y.y) x0
Explanation: This is the representation of 1 ([false, x0]).
\z.z false x0 is equivalent to pair false x0.

> pred x0  --> false
Explanation: The predecessor of 0 is undefined (returns false by design).

> iszero (succ x0)  --> false
Explanation: succ x0 is 1, which is not zero.

## 6. Key Pattern of Numerals

Each numeral n is constructed as:
0 = I
1 = [false, 0]
2 = [false, 1]
...

n+1 = [false, n]

Operations leverage this pattern:
succ: Adds a nesting level [false, x].
pred: Removes a level (extracts the second element).
iszero: Checks if the term is I (the only one that returns true when applied to true).

## 7. STEP-BY-STEP USAGE

1. Load Definitions:

> let true = \x.\y.x;                   -- Boolean primitives
> let false = \x.\y.y;
> let pair = \m.\n.\z.z m n;            -- Pair constructor
> let zero = \x.x;                      -- Numeral base case
> let succ = \x.pair false x;           -- Arithmetic

2. Validate Foundations:

> true M N --> M                        -- Boolean check
> pair M N true --> M                   -- Pair check

3. Test Numerals:

> let x2 = succ (succ zero);            -- Create 2
> iszero x2 --> false                   -- Verify non-zero
> pred x2 --> x1                        -- Verify predecessor

## 10. REFERENCES WITH CONTEXT

1. Barendregt, H. (1984)
The Lambda Calculus: Defines this numeral system in §6.2 as an alternative to Church encoding.

2. Lambda Shell Docs
Confirms syntax for :quit and --version flags used in testing.

3. Church, A. (1941)
The Calculi of Lambda Conversion: Contrast with Church numerals (\f.\x.f^n x).

4. Implementation Evidence:

-- All operations validated in Lambda Shell v0.4.0:
--   pred (succ x0) == x0   // Correct behavior
--   iszero zero == true    // Meets specification








